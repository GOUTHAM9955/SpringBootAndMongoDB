package com.launcher.com.MongoDBLauncher1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

import com.launcher.com.MongoDBLauncher1.customerDTO.CustomerDto;
import com.launcher.com.MongoDBLauncher1.service.CustomerService;
import com.launcher.com.MongoDBLauncher1.utils.IdGenerator;
//General Info
/*
 * Model or Business object is same which is the object on which we are working ex: Vaccine, Employee, Student etc
 * Value Object: Is the object which is used to display the content in front end
 * DTO: Data tranfer object is the object which is used to transfer the data between multiple layers
 */

/*
 * In this class we are going to work withy mongodb
 * 		1) Create a spring project with starter-data-mongodb dependency
 * 		2) Connect to DB using application properties
 * 
 * We use @Document instead of @Entity for Model class 
 * In the inferace for repository layer we extends MongoRepository (which inturn extends ListCrudRepository and ListPagingansSortingRepository) and the return type is list
 * 
 * 
 * In this project we implemented a new layer called DTO(Data transfer object which will be used in service layer to transfer data)
 * 		It has all the fileds as model class except id which is autogenerated.
 * 		WE COPIED THIS DTO OBJECT TO MODEL OBJECT USING BeanUtils(It doesnâ€™t throw an error if a field is missing[id filed isn't there in CustomerDto]) IN SERVICE LAYER... CHECK IT
 * 				(ModelMapper handles copying data better // From chatGpt)
 * 
 * 
 * 	We also created a class to generate our own Id instead of MongoDb generating it for us in utils package
 * 
 * For deleting we can use optional Object to find by Id and delete by Id ifPresent as we did earlier
 *
 */

@SpringBootApplication
public class MongoDbLauncher1Application {

	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(MongoDbLauncher1Application.class, args);
		CustomerService customerService = context.getBean(CustomerService.class);
		
		/*
		 * CustomerDto customerDto = new CustomerDto(3,"Peter","Hyd");
		 * System.out.println(customerService.registerCustomer(customerDto));
		 * 
		 * customerService.findAll().forEach(cus-> System.out.println(cus));
		 */
		
		
		// If you want to generate own own Id we can use the below in our CustomerDto layer:
			System.out.println("Random Id Generated is:   " + IdGenerator.generateId());
			
		// The Id generated is usually very large for optimal geration we can use replace to replace '-' char and get substring of it which we implemented in below static method
			System.out.println("Optimal Id Generated is   :   " + IdGenerator.optimalIdGenerator());
		
	}

}
